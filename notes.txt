You connect to the DB using mongoose which returns promises. When you have a promise you use `.then()`

You use config/default.json to store and us global variables.

Use hashing for special characters in your password - URI

Refactor to async - await for promises instead of .then .catch!!


Creating user functionality and establishing routes


Mongoose Models : You need to have a model for each resource in the database (mongoose). Inside a model theres
a schema for that specific resource.

In order to send a request body we need to use a bit of middleware. (included with express)

I want to limit the scope of what can be sent in the request body and also make sure that smth is sent.
We do this by using the express validator.

We use bcrypt to encrypt the password before storing it to the database.

JS Web Token: Now that we have a way to register a user and add it to the database, we need a way to respond,
which is done by JSON Web Token (A special token that has a special payload in it)

Create and respond with an encoded Json Web Token!

Now we are going to create 'login' user! Similar to registering a user!

Middleware is just a function that has access to the req,res cycle and object. Every time we hit the endpoint
we can fire in this middleware function. Whenever you have a middleware fucntion you need to have a 'next' 
function which says to move on to the next middleware.

Added 'auth' middleware to the getting logged in user route. Authentication part is done!

Creating contact model schema and then adding the route - get all contacts for that user!



FRONTEND START

use concurrently to run both backend and frontend server together

axios - http react client

added font awesome code in index.html

We created the client side folder and included a component 'navbar' using proptypes to ensure that the 
navbar has the attributes 'title' and a 'icon'.



