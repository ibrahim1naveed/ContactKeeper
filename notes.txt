You connect to the DB using mongoose which returns promises. When you have a promise you use `.then()`

You use config/default.json to store and us global variables.

Use hashing for special characters in your password - URI

Refactor to async - await for promises instead of .then .catch!!


Creating user functionality and establishing routes


Mongoose Models : You need to have a model for each resource in the database (mongoose). Inside a model theres
a schema for that specific resource.

In order to send a request body we need to use a bit of middleware. (included with express)

I want to limit the scope of what can be sent in the request body and also make sure that smth is sent.
We do this by using the express validator.

We use bcrypt to encrypt the password before storing it to the database.

JS Web Token: Now that we have a way to register a user and add it to the database, we need a way to respond,
which is done by JSON Web Token (A special token that has a special payload in it)

Create and respond with an encoded Json Web Token!

Now we are going to create 'login' user! Similar to registering a user!

Middleware is just a function that has access to the req,res cycle and object. Every time we hit the endpoint
we can fire in this middleware function. Whenever you have a middleware fucntion you need to have a 'next' 
function which says to move on to the next middleware.

Added 'auth' middleware to the getting logged in user route. Authentication part is done!

Creating contact model schema and then adding the route - get all contacts for that user!



FRONTEND START

use concurrently to run both backend and frontend server together

axios - http react client

added font awesome code in index.html

We created the client side folder and included a component 'navbar' using proptypes to ensure that the 
navbar has the attributes 'title' and a 'icon'.

We will be using react router for the front end. 

Fragments let you group a list of children nodes without a parent node.

Adding routes:

Link is to direct the page to another sub page

'uuid' to generate a random user id.

CONTEXT react

Steps:

1. Create Context folder
2. Create context/types.js - variables that we are going to use to decide what we are going to do in our reducer.
3. Create contact/ context, state, reducer files (Structure from template)

    Context : Just to initiliaze the context object.
    State : `useReducer` hook to have access to the state and also to use dispatch (to our reducer). Import
    the now intialized contact context & the contact reducer.
    Reducer : 

In the state file, the next step after defining the initial state is to pull out the state and dispatch from
our reducer from our 'useReducer' hook.

Wrap entire app.js code with the ContactState so that we can use it. Now we have access to our STATE. 

Start creating components.

Contacts : Pull in the contacts from the state into the contacts component and then loop through them and 
output a contact item for each of them.

useContext hook!!

Use the data about contacts and embed it on the home page!


//If theres an email then output an li
            {email && (<li>
                <i className='fas fa-envelope-open'></i> {email}
                </li>)}


Contact Form components

Bring in useState because since this is a form we do need a component level state. 

Set and Clear Current Contact:

Added a new state called current to highlight which contact we are on and perform tasks on it. This is done
by using the State - Context - Reducer technique. Now that we have a component selected we need to write
the code for the 'Action' that needs to be implemented. Thats what we are going to do right now.

useEffect is a hook that im going to use that basically mimics the lifecycle method componentDidMount!

Filtering:

Type in something and filter on different features. We are going to want to have a piece of state dedicated
to filtered contacts.

Going to use 'useRef' to reference a DOM object.

Use Effect : If the filter contact is empty i want the values to be empty

ContactState has all the actions to be used!
